
One_pin_input_output.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000007d  00000000  00000000  00000127  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004a  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c5  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a0  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

void main()
{
unsigned char data;

DDRB=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
DDRC=0x00; // DDRC&=(~(1<<0))|(~(1<<1))
  70:	14 ba       	out	0x14, r1	; 20
DDRC=0x00;
  72:	14 ba       	out	0x14, r1	; 20
if(PINC&0b11011111)// if(PINC&(1<<5)), read Vcc input from switch
	{ 				// if(!(PINC&(1<<5))), read ground from switch at that time PORTB|=(1<<5)
	DDRB=DDRB&~(1<<5);
	if(PIND&0b11011111)
	{
	PORTB=1;
  74:	21 e0       	ldi	r18, 0x01	; 1
	
else 
	{
	DDRB=DDRB|(1<<5);
	
	PORTB=2;
  76:	92 e0       	ldi	r25, 0x02	; 2
DDRB=0xFF;
DDRC=0x00; // DDRC&=(~(1<<0))|(~(1<<1))
DDRC=0x00;
while(1)
{
if(PINC&0b11011111)// if(PINC&(1<<5)), read Vcc input from switch
  78:	83 b3       	in	r24, 0x13	; 19
  7a:	8f 7d       	andi	r24, 0xDF	; 223
  7c:	41 f0       	breq	.+16     	; 0x8e <main+0x22>
	{ 				// if(!(PINC&(1<<5))), read ground from switch at that time PORTB|=(1<<5)
	DDRB=DDRB&~(1<<5);
  7e:	bd 98       	cbi	0x17, 5	; 23
	if(PIND&0b11011111)
  80:	80 b3       	in	r24, 0x10	; 16
  82:	8f 7d       	andi	r24, 0xDF	; 223
  84:	11 f0       	breq	.+4      	; 0x8a <main+0x1e>
	{
	PORTB=1;
  86:	28 bb       	out	0x18, r18	; 24
  88:	f7 cf       	rjmp	.-18     	; 0x78 <main+0xc>
	}
	else
	PORTB=0;
  8a:	18 ba       	out	0x18, r1	; 24
  8c:	f5 cf       	rjmp	.-22     	; 0x78 <main+0xc>
}
	
else 
	{
	DDRB=DDRB|(1<<5);
  8e:	bd 9a       	sbi	0x17, 5	; 23
	
	PORTB=2;
  90:	98 bb       	out	0x18, r25	; 24
  92:	f2 cf       	rjmp	.-28     	; 0x78 <main+0xc>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
